/**
 * jquery.Permissions
 * 
 * Defines client-side behaviour for the Permissions tree.
 *
 * @author Robert Corley
 * 
 */
;(function ($) {
  var methods = {

    /**
     * Constructor
     * 
     * Setup everything required to render the dataTables table.
     * 
     */ 
    init : function ( options ) {
        
        function get_li (element, tree)
        {
            if (tree = undefined) {
                tree = {};
            }
            
            $(this).children('li').each(function(){
                tree[$(this).attr('-data-path-hash')] = $(this).hasClass('jstree-checked');
                
            });
        }
        
        $(this)
            .on("loaded.jstree", function (event, data) {
                
                // Populate the tree
                $('#permissions').jstree('check_node', 'li.checked');
                $('#permissions').jstree('uncheck_node', 'li.unchecked');
                
                // Add the handlers for changing the permissions
                $(this)
                .on('check_node.jstree', function(e, data){
                    if ( ! $(data.args[0]).hasClass('view')) {
                        $.fn.Permissions('set_permission', data, options, 1);
                    }
                    $(data.args[0]).parent().children('span.grey').remove();
                    $(data.args[0]).parent().parent().removeClass('inherited view');
                    $(data.args[0]).parent().find('span.view-only').remove();
                    $(data.args[0]).parent().parent().find('li').find('span.view-only').remove();
                })
                .on('uncheck_node.jstree', function(e, data){
                    $.fn.Permissions('set_permission', data, options, 0);
                    $(data.args[0]).parent().children('span.grey').remove();
                    $(data.args[0]).parent().parent().removeClass('inherited view');
                    $(data.args[0]).parent().find('span.view-only').remove();
                    $(data.args[0]).parent().parent().find('li').find('span.view-only').remove();
                   
                })
                // Clickable text to open node
                .on('click', 'a', function(e) {
                    $.jstree._focused().toggle_node(this);
                }); 
                
                // Right click for view only
                $('ins.jstree-checkbox').on('contextmenu', function(e) {
                    data = {args: [this]};
                	e.preventDefault();
                	e.stopPropagation();
                	
                    $(data.args[0]).parent().parent().addClass('view');
                    $('#permissions').jstree('check_node', $(data.args[0]).parent().parent()[0]);
                	$.fn.Permissions('set_permission', data, options, 2);
                    //$(data.args[0]).parent().children('span.grey').remove();
                    //$(data.args[0]).parent().parent().removeClass('inherited unchecked jstree-unchecked');
                    $(data.args[0]).parent().find('span.view-only').remove();
                    $(data.args[0]).parent().append(' <span class="view-only">(View Only)</span>');
                    
                    $(data.args[0]).parent().parent().find('li').find('span.view-only').remove();
                    $(data.args[0]).parent().parent().find('li').append(' <span class="view-only">(View Only)</span>');
                    
                    //$('#permissions').jstree('check_node'$(data.args[0]).parent().parent()[0]
                    //$(data.args[0]).parent().parent().jstree('check_node');
                    //$.jstree._reference("#colors").check_node('li#tree_3');
                });
            })
            
            // Initialize the tree
            .jstree({
                "themes" : {"theme" : "default",
                            "dots" : true,
                            "icons" : true,
                            "url" : base_url + 'assets/scripts/plugins/jstree/themes/default/style.css'},
                "plugins" : ["themes", "html_data", "checkbox", "sort", "ui"],
                "checkbox" : {"checked_parent_open" : false,
                              //"two_state" : (options.type == 'user' ? true : false)
                              }
            });
            
            
            
    },

    // ------------------------------------------------------------------------

    /**
     * Set Permission
     * 
     * Initiates a post request to update a permission.
     * 
     */
    set_permission : function ( data, options, permission ) {

        var path_hash = $(data.args[0]).parent().parent().attr('-data-path-hash');
        var path = $(data.args[0]).parent().parent().attr('data-path');
       
        $.ajax({
           "url" : base_url + 'settings/permissions/set',
           "type" : "post",
           "data" : {
                "id" : options.id,
                "path_hash" : path_hash,
                "permission_type" : options.type,
                "permission" : permission }
        });
    },

    // ------------------------------------------------------------------------

    /**
     * Site Permissions
     * 
     * Sets up the checkboxes for selecting which sites a user can edit.
     * 
     */ 
    site_permissions : function ( options ) {
        
        $(this)
            .on("loaded.jstree", function (event, data) {
                
                // Populate the tree
                $('#sites').jstree('check_node', 'li.checked');
                $('#sites').jstree('uncheck_node', 'li.unchecked');
                
                
                // Add the handlers for changing the permissions
                $(this)
                .on('check_node.jstree',function(e, data){
                    $.fn.Permissions('set_site_permission', data, options, 1);
                })
                .on('uncheck_node.jstree',function(e, data){
                    $.fn.Permissions('set_site_permission', data, options, 0);
                })
                // Clickable text to open node
                .on('click','a', function(e) {
                    $.jstree._focused().toggle_node(this);
                });
                
                // Disable inherited sites from being edited
                $('#sites ul li.inherited').addClass('disabled');
                
            })
            
            // Initialize the tree
            .jstree({
                "themes" : {"theme" : "default",
                            "dots" : true,
                            "icons" : true,
                            "url" : base_url + 'assets/scripts/plugins/jstree/themes/default/style.css'},
                "plugins" : ["themes", "html_data", "checkbox", "sort", "ui"],
                "checkbox" : {"checked_parent_open" : false,
                              "two_state" : true}
            });
            
    },

    // ------------------------------------------------------------------------

    /**
     * Set Site Permission
     * 
     * Initiates a post request to update a site permission.
     * 
     */
    set_site_permission : function ( data, options, permission ) {

       var user_id = $(data.args[0]).parent().parent().attr('data-user-id');
       var site_id = $(data.args[0]).parent().parent().attr('data-site-id');
       
       $.ajax({
           "url" : base_url + 'settings/permissions/set_site',
           "type" : "post",
           "data" : {"user_id" : user_id,
                     "site_id" : site_id,
                     "permission" : permission}
       });

    }

  };

  // ----------------------------------------------------------------------
    
  /**
   * Setup method handler
   */
  $.fn.Permissions = function( method ) {
        if ( methods[method] ) {
          return methods[ method ].apply( this, Array.prototype.slice.call( arguments, 1 ));
        } else if ( typeof method === 'object' || ! method ) {
          return methods.init.apply( this, arguments );
        } else {
          $.error( 'Method ' +  method + ' does not exist on jQuery.Permissions' );
        }    
    };
})( jQuery );