/**
 * jquery.ContentBox
 * 
 * Defines client-side behaviour for ContentBox objects. Mainly just handles
 * updating of content boxes when a form that is bound to the content box is
 * submitted. 
 *
 * @author Robert Corley
 * 
 */

;(function( $ ){
  var methods = {

    /**
     * Constructor
     * 
     */ 
    init : function( options ) {
        
        return $(this);
        
    },

    // ------------------------------------------------------------------------

    /**
     * Update Method
     * 
     * Update the ContentBox
     * 
     */
    update : function( record_id ) {
        
        // Set options
        var options = { record_id: record_id,
                        content_box: $(this),
                        ajax_update_url: $(this).data('ajax_update_url')};
        var oTable;
        var oSettings;
        
        // Try and find DataTable inside ContentBox
        oTable = $(this).find('table.display').Table();
        if (oTable) {
            oSettings = oTable.data('options');
        }
    
        // If not a datatable just update html
        if ( ! oTable ) {
            $(this).ContentBox( 'update_html', options );
        }
        // If ajax source datatable then just reload the ajax from the url
        else if ( oSettings.ajax_source !== null && oSettings.server_side === false ) {
            oTable.ContentBox( 'reload_ajax', options );
        }
        // If server side datatable then redraw the table
        else if ( oSettings.server_side === true ) {
            oTable.ContentBox( 'redraw_table', options );
        }
        // If non-ajax datatable then inject row
        else {
            oTable.ContentBox( 'inject_row', options );
        }
            
        return $(this);
    },


    // ------------------------------------------------------------------------

    /**
     * Inject Row
     * 
     * Inject row back into table after successful ajax request
     * 
     */
    inject_row : function( options ) {

        var oTable = this;

        // Get the row and do fnUpdate to update row
        var trailing_slash = (options.ajax_update_url[options.ajax_update_url.length - 1] == '/') ? '' : '/';
        
        $.getJSON( base_url + options.ajax_update_url + trailing_slash + options.record_id, function(data) {
            
            var row = $('#' + data.row_id);
            
            // If row exists then update
            if ( row.length !== 0 && row !== undefined ) {
                oTable.fnUpdate($.makeArray(data.row_array), row.get(0));
            // Otherwise add new row
            } else {
                oTable.fnAddTr($(data.row_html)[0],true);
            }
            options.content_box.trigger('onContentUpdated');
        });
    },

    // ------------------------------------------------------------------------

    /**
     * Update HTML
     * 
     * Gets HTML for whole content box and replaces it in the DOM
     * 
     */
    update_html : function( options ) {

        self = $(this);

        var trailing_slash = (options.ajax_update_url[options.ajax_update_url.length - 1] == '/') ? '' : '/';
        $.get(base_url + options.ajax_update_url + trailing_slash + options.record_id, function(data) {
            content = $(data).find('.content-box-inner');
            self.find('.content-box-inner').replaceWith(content);
            options.content_box.trigger('onContentUpdated');
            
        });
    },

    // ------------------------------------------------------------------------

    /**
     * Redraw Table
     * 
     * Refreshes dataTable, this is used to update server side tables
     * 
     */
    redraw_table : function( options ) {

        this.fnDraw();
        this.fnReloadAjax();
        options.content_box.trigger('onContentUpdated');

    },


    // ------------------------------------------------------------------------

    /**
     * Reload Ajax
     * 
     * Refreshes all ajax data for 'ajax data source' dataTables
     * 
     */
    reload_ajax : function( options ) {

        this.fnReloadAjax();
        this.fnDraw();
        options.content_box.trigger('onContentUpdated');

    },

    // ------------------------------------------------------------------------

    /**
     *  method
     * 
     * 
     * 
     */
    some_method : function( options ) {
        
        return $(this);
        
    }
  };

  // ----------------------------------------------------------------------

  /**
   * Setup method handler
   */
  $.fn.ContentBox = function( method ) {
        if ( methods[method] ) {
          return methods[ method ].apply( this, Array.prototype.slice.call( arguments, 1 ));
        } else if ( typeof method === 'object' || ! method ) {
          return methods.init.apply( this, arguments );
        } else {
          $.error( 'Method ' +  method + ' does not exist on jQuery.ContentBox' );
        }    
    };
})( jQuery );