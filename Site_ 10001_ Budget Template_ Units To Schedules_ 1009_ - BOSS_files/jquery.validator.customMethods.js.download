/**
 * jQuery Custom Validation Methods
 *
 * These are custom validation methods for the jquery validation plugin:-
 * http://bassistance.de/jquery-plugins/jquery-plugin-validation/
 * http://docs.jquery.com/Plugins/Validation
 *
 * @author Robert Corley
 *
 */
$(document).ready(function() {
	/**
	 * Validate decimal
	 */
	jQuery.validator.addMethod("decimal", function(value, element) {
		return value == '' ? true : value.match(/^-?\d+(\.\d+)?$/);
	}, "Invalid amount. Valid examples are 1000 or 99.99");

    // --------------------------------------------------------------------

	/**
	 *  Validate password field
	 */
	jQuery.validator.addMethod("password", function( value, element ) {
		var result = this.optional(element) || value.length >= 6 && /\d/.test(value) && /[a-z]/i.test(value);
		return result;
	}, "Passwords must be at least 6 characters long and contain at least one number and one character.");

    // ------------------------------------------------------------------------

    /**
     *  Validate positive number
     */
    jQuery.validator.addMethod("positive_number", function( value ) {
        return Number(value) >= 0 || $.trim(value) == '';
    }, "Enter a positive number.");

    // ------------------------------------------------------------------------

    /**
     *  Value not equals - use to stop select fields being zero
     */
    jQuery.validator.addMethod("value_not_equals", function(value, element, arg){
        return arg != value;
    }, "This field is required.");

    // ------------------------------------------------------------------------

    /**
     *  Less than
     */
    jQuery.validator.addMethod('less_than', function(value, element, param) {
        if (this.optional(element)) return true;
        var i = Number(value);
        var j = Number(param);
        return i < j;
    }, "This value must be less than {0}");


	// ------------------------------------------------------------------------

	/**
	 *  Less than or equal to
	 */
	jQuery.validator.addMethod('less_than_or_equal_to', function(value, element, param) {
		if (this.optional(element)) return true;
		var i = Number(value);
		var j = Number(param);
		return i <= j;
	}, "This value must be less than or equal to {0}");

	// ------------------------------------------------------------------------

	/**
     *  Less than field
     */
    jQuery.validator.addMethod('less_than_field', function(value, element, name) {
		var input = $('input[name="' + name + '"]');
		if (input.length && ! input.hasClass('ignore')) {
			console.log(Number(input.val()));
			console.log(Number(element.val()));
			return Number(input.val()) < Number(value);
		} else {
			return true;
		}
	}, function(name) {
		var input = $('input[name="' + name + '"]');
		var title = input.siblings('label').html();
		return "This value must be less than the '" + title + "' field";
	});

	// ------------------------------------------------------------------------

	/**
     *  Less than or equal to field
     */
    jQuery.validator.addMethod('less_than_or_equal_to_field', function(value, element, name) {
		var input = $('input[name="' + name + '"]');
		if (input.length && ! input.hasClass('ignore')) {
			console.log(Number(input.val()));
			console.log(Number($(element).val()));
			return Number($(element).val()) <= Number(input.val());
		} else {
			return true;
		}
	}, function(name) {
		var input = $('input[name="' + name + '"]');
		var title = input.siblings('label').html();
		title = title == null ? name : title;
		return "This value must be less than the '" + title + "' field";
	});

    // ------------------------------------------------------------------------

    /**
     *  Remote method that submits all form values not just the field being
     *  validated. Used for validating unique indexes on multiple fields and
     *  such like.
     */
    jQuery.validator.methods.remote_internal = jQuery.validator.methods.remote;
    jQuery.validator.addMethod("remote", function( value, element, url ) {

        var form = $(this.currentForm);

		// Find disabled inputs, and remove the "disabled" attribute
		var disabled = form.find(':input:disabled').removeAttr('disabled');

		 // serialize the form
		var serialized = form.serialize();

		 // re-disabled
		disabled.attr('disabled','disabled');

        // Run validation
        return jQuery.validator.methods.remote_internal.call(this,value, element, {
        	url: base_url + url,
            type: "post",
            data: serialized
        });
    }, null);

    // ------------------------------------------------------------------------

    /**
     *  Sum non zero - this validation is done the server side - this method
     *  just returns true to avoid 'validation metho not found' error
     */
    jQuery.validator.addMethod("sum_non_zero", function( value, element ) {
        return true;
    }, "Message here");

    // ------------------------------------------------------------------------

    /**
     *  Matches
     *
     *  Value equals value of another field.
     */
    jQuery.validator.addMethod("matches", function( value, element, name ) {
   		var input = $('input[name="' + name + '"]');
    	if (input.length && ! input.hasClass('ignore')) {
    		return input.val() == value;
    	} else {
    		return true;
    	}
    }, function(name) {
    	var input = $('input[name="' + name + '"]');
    	var title = input.siblings('label').html();
		title = title == null ? name : title;
    	return "This value must be the same as the '" + title + "' field";
    });

    // ------------------------------------------------------------------------

    /**
     *  Not Match
     *
     *  Value must not equal the value of another field.
     */
    jQuery.validator.addMethod("not_match", function( value, element, name ) {
        var input = $('input[name="' + name + '"]');
        if (input.length && ! input.hasClass('ignore')) {
            return input.val() != value;
        } else {
            return true;
        }
    }, "These fields {0} and {1} must not be equal");

    // ------------------------------------------------------------------------

    /**
     *  Sum non zero - this validation is done the server side - this method
     *  just returns true to avoid 'validation metho not found' error
     */
    jQuery.validator.addMethod("sum_equals", function( value, element, options ) {
    	var options = options.split(',');
    	var prefix = options[0];
    	var name = options[1];
    	var sum_field = $('[name="' + name + '"]');
    	var form = $(element).parents('form');
    	var fields = form.find('[name^="' + prefix + '"]:not(.ignore)');
    	var total = 0;
    	fields.each(function(i, elem) {
    		total += Number($(elem).val());
    	});
    	var valid = Math.abs(total - Number(sum_field.val())) < 0.001;
        if (valid) {
        	fields.each(function() {
        	    $(this).parent().find('.field-info .error').remove();
    	    });
        }
    	return valid;
    }, function(options) {
    	var options = options.split(',');
    	var prefix = options[0];
    	var name = options[1];
    	var input = $('input[name="' + name + '"]');
    	var title = input.siblings('label').html();
    	if (title == null) {
    	    title = name.replace(/_/, ' ');
    	}
    	return "These must add to '" + title + "'";
    });

	// --------------------------------------------------------------------

    /**
     *  Validate postcode if country_id is GB
     */
    jQuery.validator.addMethod("postcode", function( value, element, options ) {

        var country_code = $(element)
			.parents('form')
            .find('[name="country_id"]')
			.val()
		;

        if (value == '') {
        	return true;
		}

        // Validate postcode if country code is GB
        if (country_code == 'GB' || country_code == 'GG' || country_code == 'JE' || ! country_code) {
			var matched = value.match(/[A-Z]{1,2}[0-9][0-9A-Z]?\s?[0-9][A-Z]{2}/i);
			return matched != null;
		} else {
        	return true;
		}
    }, function() {
        return "Please enter a valid UK postcode";
    });

	// --------------------------------------------------------------------

	/*jQuery.validator.addMethod("billingRequired", function(value, element) {
		if ($("#bill_to_co").is(":checked"))
			return $(element).parents(".subTable").length;
		return !this.optional(element);
	}, "");


	jQuery.validator.addMethod("password", function( value, element ) {
		var result = this.optional(element) || value.length >= 6 && /\d/.test(value) && /[a-z]/i.test(value);
		if (!result) {
			element.value = "";
			var validator = this;
			setTimeout(function() {
				validator.blockFocusCleanup = true;
				element.focus();
				validator.blockFocusCleanup = false;
			}, 1);
		}
		return result;
	}, "Your password must be at least 6 characters long and contain at least one number and one character.");

	// a custom method making the default value for companyurl ("http://") invalid, without displaying the "invalid url" message
	jQuery.validator.addMethod("defaultInvalid", function(value, element) {
		return value != element.defaultValue;
	}, "");

	jQuery.validator.addMethod("billingRequired", function(value, element) {
		if ($("#bill_to_co").is(":checked"))
			return $(element).parents(".subTable").length;
		return !this.optional(element);
	}, "");

	*/
});
