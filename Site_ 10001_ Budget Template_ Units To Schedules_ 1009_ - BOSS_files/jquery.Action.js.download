/**
 * jquery.Action
 *
 * Defines behavior for Action objects.
 *
 * This includes buttons that produce modal popups and buttons that
 * make an asynchronous request.
 *
 * @todo Split this class into sub classes
 *
 * @author Robert Corley
 *
 */
;(function( $ ){
  "use strict";

  var methods = {

    /**
     * Constructor
     *
     * Binds a click event to the action button to get and display the ContentBox.
     *
     */
    init : function( options ) {

        var content_box_wrapper = $.fn.Action('get_wrapper',options.content_box_id);
        if (options.width) {
            content_box_wrapper.data('mwidth', options.width)
        }

        // Setup Jquery UI dialog
        content_box_wrapper.Action('dialog', options.height, options.width);

        // Bind click event to open dialog
        //$(document).off('click.dialog',options.jquery_selector);
        $(document).on('click.dialog',options.jquery_selector, function(event) {
            event.preventDefault();
            event.stopPropagation();
            var content_box_wrapper = $('#' + options.content_box_id + '_wrapper');
            content_box_wrapper.Action('show', $(this), options);
        });

        // Have overlay appear while we're making the ajax request
        if ( ! $('.ui-widget-overlay').length) {
            var overlay = $.ui.dialog.overlay.create(content_box_wrapper.data('ui-dialog'))
            .css('z-index', -99999).show();
        }

        return $(this);
    },

    // --------------------------------------------------------------------

    /**
     * Show method
     *
     * Fetch the content box html from the model and open the dialog.
     *
     */
    show : function( $link, options ) {

        var content_box_wrapper = this;
        var url = $link.attr('href');
        var queryString = '';
        if ($link.data('ids')) {
            queryString = 'ids=' + $link.data('ids');
        }

        if (url !== undefined)
        {
            // Have overlay appear while we're making the ajax request
            $('.ui-widget-overlay').css('z-index', 1);
            $.fn.Util('spinner', $('body')[0]);

            if (options.always_refresh || content_box_wrapper.html() === '' || content_box_wrapper.dialog('isOpen') === true || (content_box_wrapper.find('form').length !== 0 && content_box_wrapper.find('form').attr('action') != url) ) {

                $(content_box_wrapper).Loader({
                    url: url,
                    query_string: queryString,
                    load_initially: false,
                    after_load: function (element) {

                        // Hide spinner
                        $('body > .spinner').remove();

                        // Hide titlebar
                        $(".ui-dialog-titlebar").hide();

                        // Add close button
                        $('<a href="#" class="ui-dialog-titlebar-close ui-corner-all" role="button"><span class="ui-icon ui-icon-closethick">close</span></a>')
                        .appendTo($('h2', element))
                        .on('click', function() {
                             var wrapper = $(this).closest('div.content-box-wrapper');
                             wrapper.dialog('close');

                             if (wrapper.data('gigabyte-Loader')) {
                                 wrapper.Loader('destroy');
                             }
                        });

                        // Max height
                        element.find('.content-box-inner').css('max-height', $(window).height()-100);

                        // Show dialog
                        element.dialog('open');
                    }
                });
                content_box_wrapper.Loader('load');

            } else {
                content_box_wrapper.dialog('open');
                // Hide spinner
                $('body > .spinner').remove();
            }

        }
    },


    // ------------------------------------------------------------------------

    /**
     * Get Wrapper
     *
     * Given a selector, this method attempts to find the content box
     * wrapper, if it doesn't exist in the DOM then it is created and
     * returned.
     *
     */
    get_wrapper : function( content_box_id ) {

        if($('#' + content_box_id + '_wrapper').length === 0) {
            return $('<div id="' + content_box_id + '_wrapper" class="content-box-wrapper"></div>').appendTo('body');
        } else {
            return $('#' + content_box_id + '_wrapper');
        }
    },

    // --------------------------------------------------------------------

    /**
     * Setup dialog
     *
     * jQuery UI dialog settings for form dialogs.
     *
     */
    dialog : function( height, width ) {
        var self = $(this);

        // Ctrl-s handler for saving
        function save(event){
            event.stopPropagation();
            event.preventDefault();
            self.find('form').submit();
        }

        if ( ! self.data('ui-dialog') || width) {
            width = width ? width : '800';
            var rheight = height ? height : 0;

            var max_height = $(window).height() - $(this).offset.top - 150;

            // Setup dialog
            $(this).dialog({
                minWidth: width,
                minHeight: rheight,
                //maxHeight: 400,
                //modal: true,
                position: { my: "center", at: "center center-100", of: window },
                open: function(){
                    var dialog_height = $(this).height();
                    dialog_height = (dialog_height > rheight) ? dialog_height : rheight;
                    var max_height = $(window).height() - $(this).offset().top - 25;
                    var height = (dialog_height > max_height) ? max_height : dialog_height;
                    //$(this).find('.content-box-inner').css('min-height', height);
                },
                beforeClose: function(){
                    $('.ui-widget-overlay').css('z-index', -9999);
                    $("<div />", {'class':'ui-widget-overlay'})
                    .css({  height: $("body").outerHeight(),
                            width: $("body").outerWidth(),
                            zIndex: 1001
                    }).appendTo("body").fadeOut(function(){
                        $(this).remove();
                    });
                },
                autoOpen: false,
                autoResize:false,
                resizable: false,
                show: {effect: 'fade', duration: 500},})
            .on('dialogopen',function(){
                $(document).unbind('keydown','ctrl+s');
                $(document).bind('keydown', 'ctrl+s', save);

                // Set max height so content doesn't dissapear off the page
                var maxHeight = $(window).height() - $(this).offset().top - 25;
                $(this).css({'max-height': maxHeight});
                $(this).find('.content-box-inner').css('max-height', maxHeight - 52);
            })
            .on('dialogclose',function(){
                $('ul.ui-menu').hide(); // Hide any open autocomplete menus
                $(document).unbind('keydown','ctrl+s');
            });

        }

        return self.data('ui-dialog');
    },


    /**************************************************************************
     *
     *   Ajax Button Methods
     *
     *************************************************************************/

    /**
     * Action Button
     *
     * This method sets up a an action to make an ajax request to the url in
     * the link.
     *
     */
    action_button : function( options ) {

        $(document).off('click.action_button' , options.jquery_selector );
        $(document).on('click.action_button' , options.jquery_selector, function(e){
            e.preventDefault();
            e.stopPropagation();

            var loading_image = $('<img src="' + base_url + 'assets/images/loading-small.gif" />');
            var link = $(this).replaceWith(loading_image);
            var url = link.attr('href');

            $.ajax({
                type: options.http_method,
                url: url,
                data: options.request_data,
                error: function(xhr, ajaxOptions, thrownError) {

                    switch (xhr.status) {

                        // 403 either displays a normal message or a dialog
                        // messgae with the problems
                        case 403:
                            var data = $.parseJSON(xhr.responseText);
                            // Show message
                            setTimeout(function() {
                                if (data.msg !== undefined)
                                {
                                    loading_image.replaceWith(link);
                                    $.fn.Util('show_message', data.msg);
                                }
                                else if (data.dialog_message !== undefined)
                                {
                                    loading_image.replaceWith(link);
                                    $.fn.Util('dialog_message', data.dialog_message.title, data.dialog_message.message);
                                }
                                else
                                {
                                    loading_image.replaceWith('Error');
                                    $.fn.Util('show_message', 'Problem with request');
                                }
                            },500);
                            break;

                        // Other problem with request - this fires an error report
                        default:
                            // Show message
                            loading_image.replaceWith('Error');
                            setTimeout(function() {
                                $.fn.Util('show_message', 'There was a problem with this request. An error report has been logged and adminstrators informed.');
                            },500);
                            break;
                    }
                },
                success: function( data, textStatus ) {
                    if ($.type(data) == 'string'  && data.length == 1) {
                        var success = Number(data) === 1;
                    } else {
                        if (typeof(data) === 'string') {
                          data = $.parseJSON(data);
                        }
                        var success = data.success;
                    }

                    if (success) {
                        loading_image.replaceWith(link);
                        if (options.on_success.length > 0) {
                            $.each(options.on_success, function(i, params) {
                                if (params !== null) {

                                    // Check with_options is not undefined
                                    if (params.with_options === undefined) {
                                        params.with_options = {};
                                    }

                                    // Add the original link to the options
                                    $.extend(params.with_options, {'link': link});

                                    // Call the method specified
                                    $.fn[params.call].call(link, params.method, params.with_options);
                                }
                            });
                        }
                        if (data.msg !== undefined)
                        {
                            $.fn.Util('show_message', data.msg);
                        }
                    } else {
                        loading_image.replaceWith('Error!');
                    }
                }
            });
        });

    },

    // ------------------------------------------------------------------------

    /**
     * Hide Button
     *
     * This method hides an action button - used as the default on_success
     * action for ajax action buttons.
     *
     */
    hide_button : function( options ) {
        if (options.success_text) {
            $(this).replaceWith(options.success_text);
        } else {
            $(this).hide();
        }
        return $(this);
    },

    // ------------------------------------------------------------------------

    /**
     * Disable Button
     *
     * This method disables an action button.
     *
     */
    disable : function( options ) {

        $(this)
        .click(function(e){
            e.preventDefault();
            return false;
        })
        .addClass('disabled');

        if (options.add_class) {
            $(this).addClass(options.add_class);
        }

        return $(this);
    },

    // ------------------------------------------------------------------------

    /**
     * Dismiss Notification
     *
     */
    dismiss_notification : function( settings ) {
        if (settings.id) {
            $.ajax({
                url: base_url + 'notifications/' + settings.id,
                type: 'POST',
                data: {
                    action: 'dismiss'
                },
                async: false
            });

            var message = $('.welcome-heading span').html();
            var num = message.match(/\((\d+)\)/);
            console.log(num);
            if (num[1]) {
                message = message.replace(/\((\d+)\)/, '(' + (num[1]--) + ')');
            } else {
                message = 'You have (0) new notifcations';
            }
            $('.welcome-heading span').html(message);
            $.Action('update_notification_message');
        }
    },

    // ------------------------------------------------------------------------

    /**
     * update Notification Message
     *
     */
    update_notification_message : function() {
        var message = $('.welcome-heading span').html();
        var num = message.match(/\((\d+)\)/);
        if (Number(num[1]) > 1) {
            var n = Number(num[1]) - 1;
            message = message.replace(/\((\d+)\)/, '(' + n + ')');
        } else {
            message = 'You have (0) new notifcations';
        }
        $('.welcome-heading span').html(message);
    },
    // ------------------------------------------------------------------------

    /**
     * Change Text
     *
     * This method replaces the text in the button to the supplied text in the
     * options.
     *
     */
    change_text : function( options ) {
        $(this).text(options.text);
        return $(this);
    },

    // ------------------------------------------------------------------------

    /**
     * Refresh Table
     *
     * Refresh any tables on the page
     *
     */
    refresh_table : function( options ) {
        $(this).parents('.content-box').ContentBox('update');
        return this;
    },

    /**
     * Refresh All Tables
     *
     * Refresh all datatTable tables on the page
     *
     */
    refresh_all_tables : function() {
        $('.dataTables_scrollBody').each(function () {
            var oTable = $(this).Table();
            var oSettings = oTable.fnSettings();

            // Only refresh table if it's an ajax data source table
            if (oSettings.oInit.sAjaxSource !== null) {
                oTable.fnReloadAjax();
                oTable.fnDraw();
            }
        });

        return this;
    },

    // ------------------------------------------------------------------------

    /**
     * Hotkey
     *
     * This method binds a shortcut key combination to an Action link.
     *
     */
    hotkey : function( options ) {

        $(document).bind('keyup', options.hotkey, function(){
            $(options.selector).click();
        });

        $(document).on('contentboxcontentinserted', function(){
            $(document).unbind('keyup');
        });

        return $(this);
    },

    // ------------------------------------------------------------------------

    /**
     * Hide Button Transaction
     *
     * Find the row that contains the 'other side' of the double entry and
     * removes the button for both transactions. This is used for things like
     * the transaction reversal button, since every transaction has a credit
     * and a debit the other side of the double entry need to have it's
     * 'reversal' button removed as well.
     *
     */
    hide_button_transaction : function( options ) {
        var classes = options.link.attr('class');
        var tr = $(this).parent().parent();
        var col_index = tr.children().index($(this).parent());
        var other_transaction_id;
        if (Number(tr.children().eq(0).html()) % 2 == 1) {
            other_transaction_id = Number(tr.children().eq(0).html()) + 1;
        } else {
            other_transaction_id = Number(tr.children().eq(0).html()) - 1;
        }
        var td;
        $('td:contains(' + other_transaction_id + ')', tr.parent())
        .each(function(){
            if ($(this).index() === 0) {
                var tr = $(this).parent();
                td = tr.children().eq(col_index);
            }
        });
        var selector = '.'+classes.replace(/ /,'.');
        $(selector, td).hide();
        return $(this);
    },

    // ------------------------------------------------------------------------

    /**
     * Update Content Box
     *
     * Finds the parent ContentBox of $(this) and runs the update method.
     *
     */
     update_content_box: function() {
        $(this).parentsUntil('div.content-box').parent().ContentBox('update');
        return $(this);
    },

    // ------------------------------------------------------------------------

    /**
     * Copy to Clipboard Action
     *
     * Makes an action copy a value to the clipboard when clicked.
     *
     */
     copy_to_clipboard: function( options ) {

        function add_zclip() {
            $(options.jquery_selector).each(function(){

                 var self = $(this);

                 $(this).zclip({
                     path: base_url + 'assets/scripts/plugins/ZeroClipboard.swf',
                     copy: self.attr('href').substring(1),
                     afterCopy: function(){
                                  $.fn.Util('show_message', 'Successfully copied "' + self.attr('href').substring(1) + '" to clipboard');
                                  return false;
                                }
                 });
            });
        }

        add_zclip();

        $(document).on('dataTablesOnDraw',function(){
            add_zclip();
        });

        $(document).on('onContentUpdated',function(){
            add_zclip();
        });

    },


    /**************************************************************************
     *
     *   Selected Row Methods
     *
     *************************************************************************/

    /**
     * Selected Rows
     *
     * Dynamically adds a form with the selected row IDs as a hidden element
     * and submits the form to the url provided in the options.
     *
     */
    selected_rows : function( options ) {

        $(document).on('click', options.jquery_selector, function(e){
            e.preventDefault();

            // Get TableTools object
            var oTableTools = $(this).closest('.content-box').find('table.dataTable').data('oTableTools');

            // Get selected record and extract ids
            var ids = $.fn.Action('get_selected_ids', oTableTools);

            // Generate <form> options
            var form_options = {
                target : (options.new_window === true) ? '_blank' : '_self',
                action : base_url + options.url,
                method : 'post'
            };

            // Append form to page, add ids input and submit
            $('<form>', form_options)
            .append($('<input type="hidden" name="ids" value="'+ids+'" />'))
            .appendTo('body')
            .submit();
        });

    },

    // ------------------------------------------------------------------------

    /**
     * Ajax Selected Rows
     *
     * Submits the selected rows to be saved in the session and used on the
     * server side for some action. Uusually these saved ids are added as a
     * hidden element to modal form which then does something with those
     * rows.
     *
     */
    ajax_selected_rows : function( options ) {

        $(document).on('click',options.jquery_selector,function(e){
            //e.preventDefault();

            // Get TableTools object
            var oTableTools = $(this).closest('.content-box').find('.dataTables_scrollBody table').data('oTableTools');

            // Get string of ids for the selected rows
            var ids = $.fn.Action('get_selected_ids', oTableTools);

            // Save to link so it can be picked up by Loader to be added as a
            // GET query param by Loader
            $(this).data('ids', ids);
        });

    },

    // ------------------------------------------------------------------------

    /**
     * Get Selected IDs
     *
     * Given the TableTools object for a table this method returns a comma
     * delimited string of the selected row ids.
     *
     */
    get_selected_ids : function( oTableTools ) {

        // Get selected records
        var selectedRowData = oTableTools.fnGetSelectedData();

        // Get row IDs
        var ids = '';
        $.each(selectedRowData,function(index, val) {
            ids = ids + val[1] + ',';
        });

        // Remove trailing comma
        if (ids !== '') {
            ids = ids.substr(0,ids.length -1);
        }
        return ids;
    },


    /**************************************************************************
     *
     *   Other Methods
     *
     *************************************************************************/

    /**
     * Setup confirm dialog
     *
     * This is setup using jquery ui dialog.
     */
    confirm : function( options ) {

        // Set default options
        var default_options = {
            title: "Please Confirm",
            message: "Are you sure you want to do that?",
            continue_button: "Yes",
            cancel_button: "No"
        };
        options = $.extend({},default_options,options);

        // Append html for jquery ui dialog to body
        var html = '<div id="dialog-confirm" title="' +
                          options.title +
                          '"><p>' +
                          options.message +
                          '</p></div>';
        var $dialog = $(html).appendTo('body');



        $('body').on('click.confirm',options.jquery_selector, function (event, confirmed) {
            if ( ! confirmed) {
                event.stopPropagation();

                // Create buttons object
                var buttons = {};
                var actionButton = $(this);
                buttons[options.continue_button] = function () {
                    $(this).dialog("close");
                    window.location.href = actionButton.attr('href');
                    //actionButton.off('click.confirm');
                    //actionButton.trigger('click', [true]);
                };
                buttons[options.cancel_button] = function () {
                    $(this).dialog("close");
                };

                // Create jquery ui dialog
                $dialog.dialog({
                    resizable: false,
                    autoOpen: false,
                    modal: true,
                    dialogClass: 'confirm',
                    buttons: buttons
                });
                $dialog.dialog('open');
                return false;
            } else {
                return true;
            }
        });

    },

    // --------------------------------------------------------------------

    /**
     * Submit form link
     *
     * Causes any <a href="#submit"> links to submit the form inside <section>
     *
     */
    submit_form_links : function() {

        $('a[href*="#submit"]').each(function(){
            $(this).on('click',function(e){
                e.preventDefault();
                $('div.form form').submit();
            });
        });

    },

    // ------------------------------------------------------------------------

    /**
     * Copy action
     *
     * Handles the copy action ajax request for copying unit addresses to resident
     * addresses on the controllers/sites/add_units page when setting up a new site.
     *
     */
    copy_action : function(selector) {

        $(document).on('click',selector,function(e){

            e.preventDefault();
            e.stopPropagation();

            var oTable = $(this).closest('table').Table();

            // Get the row and do fnUpdate to update row
            $.getJSON($(this).attr('href'), function(data) {
                var $row = $('#' + data.row_id);
                oTable.fnUpdate($.makeArray(data.row_array),$row.get(0));
            });

        });
    }


  };

  // ----------------------------------------------------------------------

  /**
   * Setup method handler
   */
  $.fn.Action = function( method ) {
        if ( methods[method] ) {
          return methods[ method ].apply( this, Array.prototype.slice.call( arguments, 1 ));
        } else if ( typeof method === 'object' || ! method ) {
          return methods.init.apply( this, arguments );
        } else {
          $.error( 'Method ' +  method + ' does not exist on jQuery.Action' );
        }
    };
})( jQuery );
