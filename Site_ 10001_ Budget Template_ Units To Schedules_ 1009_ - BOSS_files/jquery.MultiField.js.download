/**
 * jquery.MultiField
 *
 * This defines the behaviour for a multifield, which is one (or more) fields
 * that are duplicated (with a number prefixed to the field name) so that
 * multiple values can be entered. The number of fields visible can depend
 * on another field.
 *
 * @author Robert Corley
 *
 */
;(function($) {
    $.widget( "gigabyte.MultiField", $.gigabyte.CompositeField, {

        /**
         * Default Options
         *
         */
        options: {
            field_info: [],
            number_depends_on: null,
            array_input: false,
            _trigger_field: null,
        },

        /**
         * Constructor
         *
         */
        _create: function() {
            // Set some properties
            this.options._trigger_field = $('[name="' + this.options.number_depends_on + '"]', this.options._form);

            // Setup handler
            this._setup_handler();

            // Populate
            this.options._trigger_field.trigger('change');
        },

        // --------------------------------------------------------------------

        /**
         * Setup Handler
         *
         * Sets up the event handler to generate the correct fields when the
         * trigger field changes.
         *
         */
        _setup_handler: function() {
            var that = this;
            var options = this.options;
            options._trigger_field.on("change", function(element) {
                var needed = $(this).val();
                var exist = that.element.children().length / that.options.field_templates.length;
                // Create fields
                if (exist < needed) {
                    var fields = [];
                    n=0;
                    for(i=(exist + 1); i<=needed; i++) {
                        for (k=0; k<that.options.field_templates.length; k++) {
                            var nameSuffix = that.options.array_input ? '[' + i + ']' : '_' + i;
                            var field = {
                                label: that.options.field_templates[k].label + ' ' + i,
                                name: that.options.field_templates[k].name + nameSuffix,
                                id: that.options.field_templates[k].name + '_' + i
                            };

                            var template = that.options.field_templates[k];
                            fields[n] = $.extend(field, {
                                setup: template.setup,
                                rules: template.rules,
                                html: template.html,
                                wrapper_id: template.wrapper_id + '_' + i
                            });
                            n++;
                        }
                    }
                    that.add_fields(fields);
                // Remove fields
                } else if (exist > needed) {
                    for(i=exist; i>needed; i--) {
                        for (k=0; k<that.options.field_templates.length; k++) {
                            var suffix = that.options.array_input ? '[' + i + ']' : '_' + i
                            var name = that.options.field_templates[k].name + suffix;
                            that.remove_field(name);
                        }
                    }
                }
            });
        },

        // --------------------------------------------------------------------

        /**
         * Get Value
         *
         * Gets the value for a field.
         *
         */
        get_value: function( name, element ) {
            if (this.options.values[name] != undefined) {
                var visibleField = element.find('input[type=text]');
                if (visibleField.hasClass('form-date') || visibleField.hasClass('form-day-of-year')) {
                    var hiddenField = element.find('input[type=hidden]');
                    var dateFormat = visibleField.attr('data-display-format');
                    var visibleDate = $.datepicker.formatDate(dateFormat, new Date(this.options.values[name]));
                    visibleField.val(visibleDate);
                    hiddenField.val(this.options.values[name]);

                    return element;
                }
                return this.options.values[name];
            } else {
                return '';
            }
        }
    });
})(jQuery);